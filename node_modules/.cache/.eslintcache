[{"/Users/larissalanes/Desktop/glorIA_react/src/index.js":"1","/Users/larissalanes/Desktop/glorIA_react/src/App.js":"2","/Users/larissalanes/Desktop/glorIA_react/src/rotes/Routes.js":"3","/Users/larissalanes/Desktop/glorIA_react/src/constants/theme/Theme.js":"4","/Users/larissalanes/Desktop/glorIA_react/src/constants/colors/Colors.js":"5","/Users/larissalanes/Desktop/glorIA_react/src/pages/ChatPage/ChatPage.js":"6","/Users/larissalanes/Desktop/glorIA_react/src/pages/FeedPage/FeedPage.js":"7","/Users/larissalanes/Desktop/glorIA_react/src/components/Loading.js":"8","/Users/larissalanes/Desktop/glorIA_react/src/rotes/Coordinator.js":"9","/Users/larissalanes/Desktop/glorIA_react/src/pages/ChatPage/Styled-Chat.js":"10","/Users/larissalanes/Desktop/glorIA_react/src/pages/FeedPage/Styled-Feed.js":"11","/Users/larissalanes/Desktop/glorIA_react/src/pages/FeedPage/NoticiesPosts.js":"12","/Users/larissalanes/Desktop/glorIA_react/src/components/header/Header.js":"13","/Users/larissalanes/Desktop/glorIA_react/src/components/header/Styled-Header.js":"14","/Users/larissalanes/Desktop/glorIA_react/src/pages/ChatPage/db.js":"15","/Users/larissalanes/Desktop/glorIA_react/src/components/SpeechUtils.js":"16","/Users/larissalanes/Desktop/glorIA_react/src/components/StartRecording.js":"17","/Users/larissalanes/Desktop/glorIA_react/src/components/LoginText.js":"18"},{"size":221,"mtime":1708623457141,"results":"19","hashOfConfig":"20"},{"size":267,"mtime":1708623626238,"results":"21","hashOfConfig":"20"},{"size":609,"mtime":1708623457146,"results":"22","hashOfConfig":"20"},{"size":539,"mtime":1708623457140,"results":"23","hashOfConfig":"20"},{"size":339,"mtime":1708623457139,"results":"24","hashOfConfig":"20"},{"size":8424,"mtime":1708624422886,"results":"25","hashOfConfig":"20"},{"size":1016,"mtime":1708624233348,"results":"26","hashOfConfig":"20"},{"size":528,"mtime":1708624468534,"results":"27","hashOfConfig":"20"},{"size":133,"mtime":1708623457145,"results":"28","hashOfConfig":"20"},{"size":3340,"mtime":1708624196688,"results":"29","hashOfConfig":"20"},{"size":895,"mtime":1708624274549,"results":"30","hashOfConfig":"20"},{"size":2788,"mtime":1708623457145,"results":"31","hashOfConfig":"20"},{"size":1509,"mtime":1708623457067,"results":"32","hashOfConfig":"20"},{"size":1030,"mtime":1708624509218,"results":"33","hashOfConfig":"20"},{"size":7868,"mtime":1708623457144,"results":"34","hashOfConfig":"20"},{"size":269,"mtime":1708623457066,"results":"35","hashOfConfig":"20"},{"size":523,"mtime":1708624481031,"results":"36","hashOfConfig":"20"},{"size":756,"mtime":1708623457065,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1houm07",{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/larissalanes/Desktop/glorIA_react/src/index.js",[],"/Users/larissalanes/Desktop/glorIA_react/src/App.js",[],["76","77"],"/Users/larissalanes/Desktop/glorIA_react/src/rotes/Routes.js",[],"/Users/larissalanes/Desktop/glorIA_react/src/constants/theme/Theme.js",["78","79","80","81","82"],"/Users/larissalanes/Desktop/glorIA_react/src/constants/colors/Colors.js",[],"/Users/larissalanes/Desktop/glorIA_react/src/pages/ChatPage/ChatPage.js",["83","84","85","86","87","88","89","90","91"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { DivButtonBack, DivChat, DivInputButton, DivBoxGptMessage, DivBoxUserMessage, DivListResponseBdGpt, DivLoading, DivGpt, BtnTextoSpecth, BtnVoice, DivTexts, Bottom, DivMessageMock} from \"./Styled-Chat\";\nimport Loading from \"../../components/Loading\";\nimport buttonBack from \"../../constants/assets/arrowBack.png\"\nimport { goToFeed } from \"../../rotes/Coordinator\";\nimport { useHistory} from \"react-router\";\nimport mickIcon from \"../../constants/assets/mick.svg\"\nimport sendIcon from \"../../constants/assets/send.png\"\nimport responsesGpt from \"../../pages/ChatPage/db\"\nimport play from \"../../constants/assets/Play.png\"\nimport like from \"../../constants/assets/like.png\"\nimport deslike from \"../../constants/assets/deslike.png\"\nimport yellow from \"../../constants/assets/elipseYellow.png\"\nimport red from \"../../constants/assets/elipseRed.png\"\nimport green from \"../../constants/assets/elipseGreen.png\"\nimport speakMessage from \"../../components/SpeechUtils\";\nimport startRecording from \"../../components/StartRecording\";\nimport LoginText from \"../../components/LoginText\";\n\nconst ChatPage = () => {\n  const history = useHistory()\n  const apiKey = \"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\"\n\n  const [messageCount, setMessageCount] = useState(0);\n  const [disable, setDisable] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState(\"\");\n  const [loading, setLoading] = useState(false); \n\n  const handleSend = async (inputMessage) => {\n    if (!inputMessage && inputMessage !== \"\") return;\n\n    setMessageCount(messageCount + 1);\n\n    if (messageCount >= 2) {\n      setInputMessage(\"\");\n      setDisable(true);\n    }\n      setLoading(true); \n\n     //pesquisa no BD antes de fazer a requisição para IA\n     const matchedResponse = responsesGpt.find(response => response.id.toLowerCase() === inputMessage.toLowerCase());\n\n     if (matchedResponse) {\n       const newMessages = [...messages, { message: inputMessage, sender: \"user\" }];\n       setMessages(newMessages);\n       setInputMessage(\"\");\n   \n       const { id, titulo, imagem, materia, materia2, materia3, data, data2, data3 } = matchedResponse;\n       const responseMessage = \n       \n       <DivListResponseBdGpt key={id}>\n       <img src={imagem} alt={materia} />\n       <p style={{color: \"#555555\"}}>{titulo}</p>\n       <li style={{listStyle: \"none\"}}>\n        <a style={{textDecoration: \"none\", color: \"#C4170C\" }}href={data} target=\"_blank\" rel=\"noopener noreferrer\">\n        <p style={{color: \"#C4170C\"}}>{materia}</p>\n       </a> \n       <a style={{textDecoration: \"none\", color: \"#C4170C\" }}href={data2} target=\"_blank\" rel=\"noopener noreferrer\">\n        <p style={{color: \"#C4170Ced\"}}>{materia2}</p>\n       </a>\n       <a style={{textDecoration: \"none\", color: \"#C4170C\" }}href={data3} target=\"_blank\" rel=\"noopener noreferrer\">\n        <p style={{color: \"#C4170C\"}}>{materia3}</p>\n       </a>\n       </li>\n       </DivListResponseBdGpt>\n \n       setMessages([...newMessages, { message: responseMessage, sender: \"ChatGPT\", image: imagem }]);\n       setLoading(false); \n\n       return;\n     }\n    const messageToSend = inputMessage || inputMessage.trim();\n\n    const newMessages = [...messages, { message: inputMessage, sender: \"user\" }];\n    setMessages(newMessages);\n    setInputMessage(\"\");\n\n    const response = await fetch(\"https://api.openai.com/v1/engines/gpt-3.5-turbo-instruct/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${apiKey}`\n      },\n      body: JSON.stringify({\n        prompt: newMessages.map(({ message, sender }) => `${sender}: ${message}\\nGlorIA:`).join(\"\\n\"),\n        max_tokens: 2048,\n        temperature: 0.5,\n        top_p: 1.0,\n        stop: [\"\\n\"]\n      })\n    });\n\n    if (!response.ok) {\n      console.error(\"Erro ao enviar mensagem para a API do ChatGPT\");\n      setLoading(false); \n\n      return;\n    }\n\n    const { choices } = await response.json();\n    const gptResponse = choices[0].text.trim();\n    setMessages([...newMessages, { message: gptResponse, sender: \"ChatGPT\" }]);\n    setLoading(false); \n  };\n\n    return (\n      <DivChat>\n        <DivButtonBack>\n          <button onClick={() => goToFeed(history)}>\n            <img src={buttonBack}  alt=\"botao de fechar o chat\"/>\n          </button>\n        </DivButtonBack>\n           <div style={{ position: \"relative\", height: \"400vh\"}} >\n        {messages.map((message, i) => {\n          return message.sender === \"user\" ? (\n            <DivBoxUserMessage key={i}>{message.message}</DivBoxUserMessage>\n          ) : (\n            <div>\n              <DivBoxGptMessage key={i}>{message.message}</DivBoxGptMessage>\n              <DivGpt>\n                <section>\n                  <BtnTextoSpecth onClick={() => speakMessage(message.message)}>\n                    <img src={play}/>\n                    Ouvir\n                  </BtnTextoSpecth>\n                </section>\n                <section>\n                  <img src={like} style={{width: \"15px\", margin: \"10px\"}}/>\n                  <img src={deslike} style={{width: \"15px\"}}/>\n                  {i >= 1 && i < 2 && <img src={green} style={{width: \"15px\", margin: \"10px\"}}/>}\n                  {i >= 2 && i < 3 && <img src={yellow} style={{width: \"15px\", margin: \"10px\"}}/>}\n                  {i >= 3 && <img src={red} style={{width: \"15px\", margin: \"10px\"}}/>}\n\n                  {i >= 1 && i < 2 && <p>1 de 3</p>}\n                  {i >= 2 && i < 3 && <p>2 de 3</p>}\n                  {i >= 3 && <p>3 de 3</p>}\n                </section>\n              </DivGpt>\n            </div>\n          );\n        })}\n          {loading && <DivLoading><Loading/></DivLoading>} \n      </div>\n      <Bottom>\n        <DivTexts>\n        {disable && <LoginText></LoginText>}\n        <DivMessageMock>\n        <li>\n          <ul>\n            {disable ? (\n              <> <button style={{opacity: \"0.4\"}}\n              disabled={disable}>Ultimas do BBB 24</button>\n              <button style={{ opacity: \"0.4\"}}\n              disabled={disable}>Filmes da semana</button>\n              <button style={{ opacity: \"0.4\"}}\n              disabled={disable}>Novela</button>\n              <button style={{ opacity: \"0.4\"}}\n              disabled={disable}>Política</button>\n              <button style={{ opacity: \"0.4\"}}\n              disabled={disable}>Carnaval 2024</button>\n              <button style={{ opacity: \"0.4\"}}\n              disabled={disable}>Futebol hoje</button> </>\n              ) : (\n              <> <button onClick={() => handleSend(\"Ultimas do BBB 24\")}>Ultimas do BBB 24</button>\n              <button onClick={() => handleSend(\"Filmes da semana\")}>Filmes da semana</button>\n              <button onClick={() => handleSend(\"Novela\")}>Novela</button>\n              <button onClick={() => handleSend(\"Política\")}>Política</button>\n              <button onClick={() => handleSend(\"Carnaval 2024\")}>Carnaval 2024</button>\n              <button onClick={() => handleSend(\"Futebol hoje\")}>Futebol hoje</button></>)}\n          </ul>\n        </li>\n        </DivMessageMock>\n        </DivTexts>\n        <DivInputButton>\n        {disable ? (\n          <>\n          <input\n            style={{ background: \"#C4170C\", opacity: \"0.4\"}}\n            disabled={disable}\n            type=\"text\"\n            placeholder=\"Converse com a glorIA\"\n          />\n          <button disabled={disable} style={{opacity: \"0.4\"}}>\n          <img src={sendIcon} alt=\"botão enviar mensagem\" />\n          </button>\n          <BtnVoice disabled={disable} style={{opacity: \"0.4\"}}>\n            <img src={mickIcon} alt=\"botão enviar áudio\" />\n          </BtnVoice>\n          </>\n        ) : (\n          <>\n          <input\n            type=\"text\"\n            placeholder=\"Converse com a glorIA\"\n            value={inputMessage}\n            onChange={(e) => setInputMessage(e.target.value)}\n          />\n          <button onClick={() => handleSend(inputMessage)}>\n          <img src={sendIcon} alt=\"botão enviar mensagem\" />\n          </button>\n          <BtnVoice onClick={() => startRecording(setInputMessage)}>\n            <img src={mickIcon} alt=\"botão enviar áudio\" />\n          </BtnVoice>\n          </>\n        )}\n        </DivInputButton>\n      </Bottom>\n      </DivChat>\n    )\n}\n\nexport default ChatPage;","/Users/larissalanes/Desktop/glorIA_react/src/pages/FeedPage/FeedPage.js",[],"/Users/larissalanes/Desktop/glorIA_react/src/components/Loading.js",[],"/Users/larissalanes/Desktop/glorIA_react/src/rotes/Coordinator.js",[],"/Users/larissalanes/Desktop/glorIA_react/src/pages/ChatPage/Styled-Chat.js",[],"/Users/larissalanes/Desktop/glorIA_react/src/pages/FeedPage/Styled-Feed.js",[],"/Users/larissalanes/Desktop/glorIA_react/src/pages/FeedPage/NoticiesPosts.js",[],"/Users/larissalanes/Desktop/glorIA_react/src/components/header/Header.js",["92"],"/Users/larissalanes/Desktop/glorIA_react/src/components/header/Styled-Header.js",[],"/Users/larissalanes/Desktop/glorIA_react/src/pages/ChatPage/db.js",[],"/Users/larissalanes/Desktop/glorIA_react/src/components/SpeechUtils.js",[],"/Users/larissalanes/Desktop/glorIA_react/src/components/StartRecording.js",[],"/Users/larissalanes/Desktop/glorIA_react/src/components/LoginText.js",[],{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":2,"column":30,"nodeType":"99","messageId":"100","endLine":2,"endColumn":44},{"ruleId":"97","severity":1,"message":"101","line":2,"column":46,"nodeType":"99","messageId":"100","endLine":2,"endColumn":54},{"ruleId":"97","severity":1,"message":"102","line":2,"column":67,"nodeType":"99","messageId":"100","endLine":2,"endColumn":77},{"ruleId":"97","severity":1,"message":"103","line":2,"column":91,"nodeType":"99","messageId":"100","endLine":2,"endColumn":101},{"ruleId":"97","severity":1,"message":"104","line":2,"column":103,"nodeType":"99","messageId":"100","endLine":2,"endColumn":114},{"ruleId":"97","severity":1,"message":"105","line":1,"column":27,"nodeType":"99","messageId":"100","endLine":1,"endColumn":36},{"ruleId":"97","severity":1,"message":"106","line":1,"column":38,"nodeType":"99","messageId":"100","endLine":1,"endColumn":44},{"ruleId":"97","severity":1,"message":"107","line":73,"column":11,"nodeType":"99","messageId":"100","endLine":73,"endColumn":24},{"ruleId":"108","severity":1,"message":"109","line":124,"column":21,"nodeType":"110","endLine":124,"endColumn":38},{"ruleId":"108","severity":1,"message":"109","line":129,"column":19,"nodeType":"110","endLine":129,"endColumn":76},{"ruleId":"108","severity":1,"message":"109","line":130,"column":19,"nodeType":"110","endLine":130,"endColumn":63},{"ruleId":"108","severity":1,"message":"109","line":131,"column":39,"nodeType":"110","endLine":131,"endColumn":97},{"ruleId":"108","severity":1,"message":"109","line":132,"column":39,"nodeType":"110","endLine":132,"endColumn":98},{"ruleId":"108","severity":1,"message":"109","line":133,"column":30,"nodeType":"110","endLine":133,"endColumn":86},{"ruleId":"108","severity":1,"message":"109","line":15,"column":18,"nodeType":"110","endLine":15,"endColumn":37},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],"no-unused-vars","'ButtonsBarItem' is defined but never used.","Identifier","unusedVar","'RedColor' is defined but never used.","'BlackColor' is defined but never used.","'GreenColor' is defined but never used.","'YellowColor' is defined but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.","'messageToSend' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]