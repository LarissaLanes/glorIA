{"ast":null,"code":"var _jsxFileName = \"/Users/larissalanes/Desktop/glorIA_react/src/pages/ChatPage/ChatPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { DivButtonBack, DivChat, DivInputButton, DivBoxGptMessage, DivBoxUserMessage } from \"./Styled-Chat\";\nimport Loading from \"../../components/Loading\";\nimport buttonBack from \"../../constants/assets/arrowBack.png\";\nimport { goToFeed } from \"../../rotes/Coordinator\";\nimport { useHistory } from \"react-router\";\nimport mickIcon from \"../../constants/assets/mick.svg\";\nimport sendIcon from \"../../constants/assets/Playplay.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatPage = () => {\n  _s();\n\n  const history = useHistory();\n  const apiKey = \"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\";\n  const [messages, setMessages] = useState([{\n    message: \"OlÃ¡, eu sou a GlorIA! Como posso te ajudar hoje?\",\n    sender: \"ChatGPT\"\n  }]);\n  const [inputMessage, setInputMessage] = useState(\"\");\n\n  const handleSend = async () => {\n    if (inputMessage.trim() === \"\") {\n      return;\n    }\n\n    const newMessages = [...messages, {\n      message: inputMessage,\n      sender: \"user\"\n    }];\n    setMessages(newMessages);\n    setInputMessage(\"\");\n    const response = await fetch(\"https://api.openai.com/v1/engines/gpt-3.5-turbo-instruct/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${apiKey}`\n      },\n      body: JSON.stringify({\n        prompt: newMessages.map(_ref => {\n          let {\n            message,\n            sender\n          } = _ref;\n          return `${sender}: ${message}\\nGlorIA:`;\n        }).join(\"\\n\"),\n        max_tokens: 2048,\n        temperature: 0.5,\n        top_p: 1.0,\n        stop: [\"\\n\"]\n      })\n    });\n\n    if (!response.ok) {\n      console.error(\"Erro ao enviar mensagem para a API do ChatGPT\");\n      return;\n    }\n\n    const {\n      choices\n    } = await response.json();\n    const gptResponse = choices[0].text.trim();\n    setMessages([...newMessages, {\n      message: gptResponse,\n      sender: \"ChatGPT\"\n    }]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(DivChat, {\n    children: [/*#__PURE__*/_jsxDEV(DivButtonBack, {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => goToFeed(history),\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: buttonBack,\n          alt: \"botao de fechar o chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"relative\"\n      },\n      children: messages.map((message, i) => {\n        return message.sender === \"user\" ? /*#__PURE__*/_jsxDEV(DivBoxUserMessage, {\n          children: message.message\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(DivBoxGptMessage, {\n          children: message.message\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(DivInputButton, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Converse com a GlorIA\",\n        value: inputMessage,\n        onChange: e => setInputMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: sendIcon,\n          alt: \"bot\\xE3o enviar mensagem\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: mickIcon,\n          alt: \"bot\\xE3o enviar \\xE1udio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 7\n  }, this);\n};\n\n_s(ChatPage, \"lHFKcT+hMMyQZS/kyTkSMBAam4U=\", false, function () {\n  return [useHistory];\n});\n\n_c = ChatPage;\nexport default ChatPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"sources":["/Users/larissalanes/Desktop/glorIA_react/src/pages/ChatPage/ChatPage.js"],"names":["React","useState","DivButtonBack","DivChat","DivInputButton","DivBoxGptMessage","DivBoxUserMessage","Loading","buttonBack","goToFeed","useHistory","mickIcon","sendIcon","ChatPage","history","apiKey","messages","setMessages","message","sender","inputMessage","setInputMessage","handleSend","trim","newMessages","response","fetch","method","headers","Authorization","body","JSON","stringify","prompt","map","join","max_tokens","temperature","top_p","stop","ok","console","error","choices","json","gptResponse","text","position","i","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { DivButtonBack, DivChat, DivInputButton, DivBoxGptMessage, DivBoxUserMessage} from \"./Styled-Chat\";\nimport Loading from \"../../components/Loading\";\nimport buttonBack from \"../../constants/assets/arrowBack.png\"\nimport { goToFeed } from \"../../rotes/Coordinator\";\nimport { useHistory} from \"react-router\";\nimport mickIcon from \"../../constants/assets/mick.svg\"\nimport sendIcon from \"../../constants/assets/Playplay.svg\"\n\nconst ChatPage = () => {\n  const history = useHistory()\n  const apiKey = \"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\"\n\n  const [messages, setMessages] = useState([\n    {\n      message: \"OlÃ¡, eu sou a GlorIA! Como posso te ajudar hoje?\",\n      sender: \"ChatGPT\"\n    }\n  ]);\n  const [inputMessage, setInputMessage] = useState(\"\");\n\n  const handleSend = async () => {\n    if (inputMessage.trim() === \"\") {\n      return;\n    }\n\n    const newMessages = [...messages, { message: inputMessage, sender: \"user\" }];\n    setMessages(newMessages);\n    setInputMessage(\"\");\n\n    const response = await fetch(\"https://api.openai.com/v1/engines/gpt-3.5-turbo-instruct/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${apiKey}`\n      },\n      body: JSON.stringify({\n        prompt: newMessages.map(({ message, sender }) => `${sender}: ${message}\\nGlorIA:`).join(\"\\n\"),\n        max_tokens: 2048,\n        temperature: 0.5,\n        top_p: 1.0,\n        stop: [\"\\n\"]\n      })\n    });\n\n    if (!response.ok) {\n      console.error(\"Erro ao enviar mensagem para a API do ChatGPT\");\n      return;\n    }\n\n    const { choices } = await response.json();\n    const gptResponse = choices[0].text.trim();\n    setMessages([...newMessages, { message: gptResponse, sender: \"ChatGPT\" }]);\n  };\n\n    return (\n      <DivChat>\n        <DivButtonBack>\n          <button onClick={() => goToFeed(history)}>\n            <img src={buttonBack}  alt=\"botao de fechar o chat\"/>\n          </button>\n          {/* <select></select> */}\n        </DivButtonBack>\n          {/* <DivLoading>\n            <Loading/>\n          </DivLoading>         */}\n           <div style={{ position: \"relative\"}}>\n        {messages.map((message, i) => {\n          return message.sender === \"user\" ? (\n            <DivBoxUserMessage key={i}>{message.message}</DivBoxUserMessage>\n          ) : (\n              <DivBoxGptMessage key={i}>{message.message}</DivBoxGptMessage>\n             \n          );\n        })}\n      \n      </div>\n      <DivInputButton>\n        <input\n          type=\"text\"\n          placeholder=\"Converse com a GlorIA\"\n          value={inputMessage}\n          onChange={(e) => setInputMessage(e.target.value)}\n        />\n        <button onClick={handleSend}>\n          <img src={sendIcon} alt=\"botÃ£o enviar mensagem\"/>\n        </button>\n        <button>\n          <img src={mickIcon} alt=\"botÃ£o enviar Ã¡udio\"/>\n        </button>\n      </DivInputButton>\n      </DivChat>\n    )\n}\n\nexport default ChatPage;"]},"metadata":{},"sourceType":"module"}